/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CSDL;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author tienn
 */
public class KiemTraFrame extends javax.swing.JFrame {

    /**
     * Creates new form KiemTraFrame
     */
    private Timer displayTimer;
    private static String masv;
    private int soluong = StaticClass.soluongcauhoi;
    private int vitri = 0;
    private static List<CauHoi> listCauHoi;
    private List<Pair<Integer, String>> listcautraloi = new ArrayList<>();
    
    public static Socket client = null;
    public static int port = StaticClass.port;
    public static Scanner sc = new Scanner(System.in);
    public KiemTraFrame(List<CauHoi> listCauHoi, String masv) {
        initComponents();
        this.masv = masv;
        this.listCauHoi = listCauHoi;

        setLocationRelativeTo(null);

        
        hienthi();
        
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        edt_cauhoi = new javax.swing.JTextArea();
        btnA = new javax.swing.JRadioButton();
        btnB = new javax.swing.JRadioButton();
        btnC = new javax.swing.JRadioButton();
        btnD = new javax.swing.JRadioButton();
        btn_next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Kiá»ƒm tra");

        time.setText("00:30");

        jLabel3.setText("Time:");

        edt_cauhoi.setColumns(20);
        edt_cauhoi.setRows(5);
        jScrollPane1.setViewportView(edt_cauhoi);

        buttonGroup1.add(btnA);
        btnA.setText("A");

        buttonGroup1.add(btnB);
        btnB.setText("B");

        buttonGroup1.add(btnC);
        btnC.setText("C");

        buttonGroup1.add(btnD);
        btnD.setText("D");

        btn_next.setText("Next");
        btn_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                    .addComponent(btnB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(time))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnD)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(time)
                        .addComponent(jLabel3))
                    .addComponent(btn_next))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nextActionPerformed
        next();
    }//GEN-LAST:event_btn_nextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KiemTraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KiemTraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KiemTraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KiemTraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KiemTraFrame(listCauHoi, masv).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnA;
    private javax.swing.JRadioButton btnB;
    private javax.swing.JRadioButton btnC;
    private javax.swing.JRadioButton btnD;
    private javax.swing.JButton btn_next;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea edt_cauhoi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
    
    
    private void hienthi(){
        edt_cauhoi.setText(listCauHoi.get(vitri).getNoidung());
        btnA.setText(listCauHoi.get(vitri).getA());
        btnB.setText(listCauHoi.get(vitri).getB());
        btnC.setText(listCauHoi.get(vitri).getC());
        btnD.setText(listCauHoi.get(vitri).getD());
        buttonGroup1.clearSelection();
        if(displayTimer != null && displayTimer.isRunning()) displayTimer.stop();
        ActionListener listener = new ActionListener() {

            long count = 30;

            @Override
            public void actionPerformed(ActionEvent e) {
                count--;
                time.setText(convertTime(count));
                
                repaint();
                if(count==0){
                    next();
                }
            }
        };
        
        displayTimer = new Timer(1000, listener);
        displayTimer.start();
    }
    
    private void ketthucthi(){
        DatagramSocket client;
        InetAddress IP = StaticClass.IP;
        int port = StaticClass.port;
        try {
            client = new DatagramSocket();
            byte[] arrayChoice = new byte[256];
            arrayChoice = String.valueOf(4).getBytes();
            DatagramPacket packetChoice = new DatagramPacket(arrayChoice, arrayChoice.length, IP, port);
            client.send(packetChoice);
            
            byte arrayMSSV[] = new byte [256];
            arrayMSSV = masv.getBytes();
            DatagramPacket packetMSSV = new DatagramPacket(arrayMSSV, arrayMSSV.length, IP, port);
            client.send(packetMSSV);
            
            System.out.println(listcautraloi.size());
            for(int i=0; i<listcautraloi.size(); i++){
                String cautraloi = listcautraloi.get(i).getKey()+ ","
                        + listcautraloi.get(i).getValue();
                System.out.println(cautraloi);
                byte arraycautraloi[] = new byte[1000];
                arraycautraloi = cautraloi.getBytes();

                DatagramPacket packetcautraloi = new DatagramPacket( arraycautraloi , arraycautraloi.length , IP , port );
                client.send(packetcautraloi);
            }
            
            System.out.println("1");
            byte array[] = new byte [1000];
            DatagramPacket packet = new DatagramPacket( array , array.length );
            client.receive(packet);
            System.out.println("2");
            String result = new String( packet.getData() , 0 , packet.getLength() );
            JOptionPane.showMessageDialog(this, result);
            
            client.close();
        } catch (Exception ex) {
            System.out.println("CANNOT CONNECT TO SERVER" + ex);
        }
        this.dispose();
    }
    
    private void next(){
        if(btnA.isSelected()) listcautraloi.add(new Pair<Integer, String>(this.listCauHoi.get(vitri).getCauhoi(), "A"));
        else if(btnB.isSelected()) listcautraloi.add(new Pair<Integer, String>(this.listCauHoi.get(vitri).getCauhoi(), "B"));
        else if(btnC.isSelected()) listcautraloi.add(new Pair<Integer, String>(this.listCauHoi.get(vitri).getCauhoi(), "C"));
        else if(btnD.isSelected()) listcautraloi.add(new Pair<Integer, String>(this.listCauHoi.get(vitri).getCauhoi(), "D"));
        else listcautraloi.add(new Pair<Integer, String>(this.listCauHoi.get(vitri).getCauhoi(), "NONE"));
        System.out.println("vitri: " + vitri);
        System.out.println(listcautraloi.get(listcautraloi.size()-1).getKey() + " " + listcautraloi.get(listcautraloi.size()-1).getValue());
        if(vitri==soluong-1){
            ketthucthi();
        }
        else vitri++;
        
        hienthi();
    }
    
    private String convertTime(long time)
    {
        int hours = (int) time / 3600;
        int remainder = (int) time - hours * 3600;
        int mins = remainder / 60;
        remainder = remainder - mins * 60;
        int secs = remainder;

        String t = ((mins<10)?"0"+ mins: mins) + ":" + ((secs<10)?"0"+ secs: secs);
        return t;
    }

}
